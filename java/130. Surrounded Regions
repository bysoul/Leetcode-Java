class Solution {
    class Point{
        int x;
        int y;
        Point(int i,int j){
            x=i;
            y=j;
        }
    }
    public void solve(char[][] board) {
        if(board==null) return;
        int m=board.length;
        if(m==0) return;
        int n=board[0].length;
        if(n==0) return;
        LinkedList list=new LinkedList<Point>();
        for(int i=0,j=0;j<n;j++){
            if(board[i][j]=='O') {
                list.addFirst(new Point(i, j));
                board[i][j]='P';
            }
        }
        for(int i=m-1,j=0;j<n;j++){
            if(board[i][j]=='O') {
                list.addFirst(new Point(i, j));
                board[i][j]='P';
            }
        }
        for(int i=0,j=0;i<m;i++){
            if(board[i][j]=='O') {
                list.addFirst(new Point(i, j));
                board[i][j]='P';
            }
        }
        for(int i=0,j=n-1;i<m;i++){
            if(board[i][j]=='O') {
                list.addFirst(new Point(i, j));
                board[i][j]='P';
            }
        }
        while (!list.isEmpty()){
            Point p=(Point) list.removeLast();
            if(p.x-1>-1&&board[p.x-1][p.y]=='O'){
                list.addFirst(new Point(p.x-1,p.y));
                board[p.x-1][p.y]='P';
            }
            if(p.x+1<m&&board[p.x+1][p.y]=='O'){
                list.addFirst(new Point(p.x+1,p.y));
                board[p.x+1][p.y]='P';
            }
            if(p.y-1>-1&&board[p.x][p.y-1]=='O'){
                list.addFirst(new Point(p.x,p.y-1));
                board[p.x][p.y-1]='P';
            }
            if(p.y+1<n&&board[p.x][p.y+1]=='O'){
                list.addFirst(new Point(p.x,p.y+1));
                board[p.x][p.y+1]='P';
            }
        }
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++){
                if(board[i][j]=='O')
                    board[i][j]='X';
                else if(board[i][j]=='P')
                    board[i][j]='O';
            }
    }
}
