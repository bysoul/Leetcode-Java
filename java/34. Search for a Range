class Solution {
    public int[] searchRange(int[] nums, int target) {
        int left=0,right=0,nleft=-1,nright=-1;
        left=right=bs(nums,0,nums.length-1,target);
        //if target doesn't exist
        if(left==-1)
            return new int[]{left,right};
        //find left until no target in [0,left-1]
        while(left!=0&&(nleft=bs(nums,0,left-1,target))!=-1){
            left=nleft;
        }
        //find right until no target in [right,nums.length-1]
        while(right!=nums.length-1&&(nright=bs(nums,right+1,nums.length-1,target))!=-1){
            right=nright;
        }
        return new int[]{left,right};
    }
    //binary search to find index
    int bs(int[] nums,int start,int end,int x){
        while(start<=end) {
            int mid = (start + end) / 2;
            if (nums[mid]==x) return mid;
            else if(nums[mid]>x){
                end=mid-1;
            }
            else
                start=mid+1;
        }
        return -1;
    }
}
